on:
  pull_request:

name: "Trigger: Push action"

jobs:
  tests:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      - uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@00b27aa7cb85167568cb48a3838b75f4265f2bca # master

  ubuntu_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release: [jammy, focal, noble]
        platform: [amd64, arm64]
      fail-fast: false
    steps:
      - name: Copy Repo Files
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get GitHub organization or user
        run: echo 'ORG='$(echo $(dirname ${GITHUB_REPOSITORY}) | awk '{print tolower($0)}') >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          image: tonistiigi/binfmt:qemu-v7.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
      - name: Install Goss and dgoss
        run: |
          curl -fsSL https://goss.rocks/install | sh
          export PATH=$PATH:/usr/local/bin
      - name: Get current Git SHA
        id: vars
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: set testable image environment variable
        id: testvars
        run: echo "GH_RUNNER_IMAGE=ubuntu-${{ matrix.release }}-${{ env.GIT_SHA }}-${{ matrix.platform }}" >> $GITHUB_ENV
      - name: Combine Dockerfile
        run: |
          cp Dockerfile.base Dockerfile.final.ubuntu-${{ matrix.release }};
          sed -i.bak 's/FROM.*/FROM ubuntu:${{ matrix.release }}/' Dockerfile.final.ubuntu-${{ matrix.release }}

          # Combine the dockerfiles
          cp Dockerfile Dockerfile.ubuntu-${{ matrix.release }}
          cat Dockerfile.ubuntu-${{ matrix.release }} | sed "s/^FROM.*//" >>Dockerfile.final.ubuntu-${{ matrix.release }}

          # Sanity check
          grep FROM Dockerfile.final.ubuntu-${{ matrix.release }}
      - name: Retry build final image
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: |
            docker buildx build \
              --file Dockerfile.final.ubuntu-${{ matrix.release }} \
              --platform linux/${{ matrix.platform }} \
              --tag ${{ env.GH_RUNNER_IMAGE }} \
              --load \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              .
      # Tests will run against the final `${GH_RUNNER_IMAGE}` laid on top of `base-${GH_RUNNER_IMAGE}`
      - name: Run goss tests
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: |
            echo "os: ubuntu" >goss_vars_${GH_RUNNER_IMAGE}.yaml
            echo "oscodename: ${{ matrix.release }}" >>goss_vars_${GH_RUNNER_IMAGE}.yaml
            echo "arch: ${{ matrix.platform }}" >>goss_vars_${GH_RUNNER_IMAGE}.yaml
            # test the edge case from deregistration on reusable runners
            GOSS_VARS=goss_vars_${GH_RUNNER_IMAGE}.yaml GOSS_FILE=goss_reusage_fail.yaml GOSS_SLEEP=1 dgoss run --entrypoint /usr/bin/sleep \
            -e DEBUG_ONLY=true \
            -e ACCESS_TOKEN=notreal \
            -e LABELS=linux,x64 \
            -e REPO_URL=https://github.com/octokode/test1 \
            -e RUNNER_NAME=sustainjane-runner-1 \
            -e RUNNER_SCOPE=repo \
            -e RUNNER_WORKDIR=/tmp/runner/work \
            -e DISABLE_AUTOMATIC_DEREGISTRATION=false \
            -e CONFIGURED_ACTIONS_RUNNER_FILES_DIR=/runner/data \
            ${GH_RUNNER_IMAGE} 10
            if [ $? -ne 0 ]; then
              exit 1
            fi
            # test the base
            GOSS_VARS=goss_vars_${GH_RUNNER_IMAGE}.yaml GOSS_FILE=goss_base.yaml GOSS_SLEEP=1 dgoss run --entrypoint /usr/bin/sleep -e RUNNER_NAME=test -e DEBUG_ONLY=true ${GH_RUNNER_IMAGE} 10
            if [ $? -ne 0 ]; then
              exit 1
            fi
            # test the final image but with all defaults
            GOSS_VARS=goss_vars_${GH_RUNNER_IMAGE}.yaml GOSS_FILE=goss_full_defaults.yaml GOSS_SLEEP=1 dgoss run --entrypoint /usr/bin/sleep -e RUNNER_NAME=test -e DEBUG_ONLY=true ${GH_RUNNER_IMAGE} 10
            if [ $? -ne 0 ]; then
              exit 1
            fi
            # test the final image but with non-default values
            GOSS_VARS=goss_vars_${GH_RUNNER_IMAGE}.yaml GOSS_FILE=goss_full.yaml GOSS_SLEEP=1 dgoss run --entrypoint /usr/bin/sleep \
            -e DEBUG_ONLY=true \
            -e RUNNER_NAME=huzzah \
            -e REPO_URL=https://github.com/myoung34/docker-github-actions-runner \
            -e RUN_AS_ROOT=true \
            -e RUNNER_NAME_PREFIX=asdf \
            -e ACCESS_TOKEN=1234 \
            -e APP_ID=5678 \
            -e APP_PRIVATE_KEY=2345 \
            -e APP_LOGIN=SOMETHING \
            -e RUNNER_SCOPE=org \
            -e ORG_NAME=myoung34 \
            -e ENTERPRISE_NAME=emyoung34 \
            -e LABELS=blue,green \
            -e RUNNER_TOKEN=3456 \
            -e RUNNER_WORKDIR=/tmp/a \
            -e RUNNER_GROUP=wat \
            -e GITHUB_HOST=github.example.com \
            -e DISABLE_AUTOMATIC_DEREGISTRATION=true \
            -e EPHEMERAL=true \
            -e DISABLE_AUTO_UPDATE=true \
            ${GH_RUNNER_IMAGE} 10
            if [ $? -ne 0 ]; then
              exit 1
            fi
  debian_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release: [bookworm, sid]
        platform: [amd64, arm64]
      fail-fast: false
    steps:
      - name: Copy Repo Files
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get GitHub organization or user
        run: echo 'ORG='$(echo $(dirname ${GITHUB_REPOSITORY}) | awk '{print tolower($0)}') >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          image: tonistiigi/binfmt:qemu-v7.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
      - name: Install Goss and dgoss
        run: |
          curl -fsSL https://goss.rocks/install | sh
          export PATH=$PATH:/usr/local/bin
      - name: Get current Git SHA
        id: vars
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: set testable image environment variable
        id: testvars
        run: echo "GH_RUNNER_IMAGE=debian-${{ matrix.release }}-${{ env.GIT_SHA }}-${{ matrix.platform }}" >> $GITHUB_ENV
      - name: Combine Dockerfile
        run: |
          cp Dockerfile.base Dockerfile.final.debian-${{ matrix.release }}
          sed -i.bak 's/FROM.*/FROM debian:${{ matrix.release }}/' Dockerfile.final.debian-${{ matrix.release }}

          # Combine the dockerfiles
          cp Dockerfile Dockerfile.debian-${{ matrix.release }}
          cat Dockerfile.debian-${{ matrix.release }} | sed "s/^FROM.*//" >>Dockerfile.final.debian-${{ matrix.release }}

          # Sanity check
          grep FROM Dockerfile.final.debian-${{ matrix.release }}
      - name: Retry build final image
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: |
            docker buildx build \
              --file Dockerfile.final.debian-${{ matrix.release }} \
              --platform linux/${{ matrix.platform }} \
              --tag ${{ env.GH_RUNNER_IMAGE }} \
              --load \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              .
      # Tests will run against the final `${GH_RUNNER_IMAGE}` laid on top of `base-${GH_RUNNER_IMAGE}`
      - name: Run goss tests
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: |
            echo "os: debian" >goss_vars_${GH_RUNNER_IMAGE}.yaml
            echo "oscodename: ${{ matrix.release }}" >>goss_vars_${GH_RUNNER_IMAGE}.yaml
            echo "arch: ${{ matrix.platform }}" >>goss_vars_${GH_RUNNER_IMAGE}.yaml
            # test the edge case from deregistration on reusable runners
            GOSS_VARS=goss_vars_${GH_RUNNER_IMAGE}.yaml GOSS_FILE=goss_reusage_fail.yaml GOSS_SLEEP=1 dgoss run --entrypoint /usr/bin/sleep \
            -e DEBUG_ONLY=true \
            -e ACCESS_TOKEN=notreal \
            -e LABELS=linux,x64 \
            -e REPO_URL=https://github.com/octokode/test1 \
            -e RUNNER_NAME=sustainjane-runner-1 \
            -e RUNNER_SCOPE=repo \
            -e RUNNER_WORKDIR=/tmp/runner/work \
            -e DISABLE_AUTOMATIC_DEREGISTRATION=false \
            -e CONFIGURED_ACTIONS_RUNNER_FILES_DIR=/runner/data \
            ${GH_RUNNER_IMAGE} 10
            if [ $? -ne 0 ]; then
              exit 1
            fi
            # test the base
            GOSS_VARS=goss_vars_${GH_RUNNER_IMAGE}.yaml GOSS_FILE=goss_base.yaml GOSS_SLEEP=1 dgoss run --entrypoint /usr/bin/sleep -e RUNNER_NAME=test -e DEBUG_ONLY=true ${GH_RUNNER_IMAGE} 10
            # test the final image but with all defaults
            GOSS_VARS=goss_vars_${GH_RUNNER_IMAGE}.yaml GOSS_FILE=goss_full_defaults.yaml GOSS_SLEEP=1 dgoss run --entrypoint /usr/bin/sleep -e RUNNER_NAME=test -e DEBUG_ONLY=true ${GH_RUNNER_IMAGE} 10
            # test the final image but with non-default values
            GOSS_VARS=goss_vars_${GH_RUNNER_IMAGE}.yaml GOSS_FILE=goss_full.yaml GOSS_SLEEP=1 dgoss run --entrypoint /usr/bin/sleep \
            -e DEBUG_ONLY=true \
            -e RUNNER_NAME=huzzah \
            -e REPO_URL=https://github.com/myoung34/docker-github-actions-runner \
            -e RUN_AS_ROOT=true \
            -e RUNNER_NAME_PREFIX=asdf \
            -e ACCESS_TOKEN=1234 \
            -e APP_ID=5678 \
            -e APP_PRIVATE_KEY=2345 \
            -e APP_LOGIN=SOMETHING \
            -e RUNNER_SCOPE=org \
            -e ORG_NAME=myoung34 \
            -e ENTERPRISE_NAME=emyoung34 \
            -e LABELS=blue,green \
            -e RUNNER_TOKEN=3456 \
            -e RUNNER_WORKDIR=/tmp/a \
            -e RUNNER_GROUP=wat \
            -e GITHUB_HOST=github.example.com \
            -e DISABLE_AUTOMATIC_DEREGISTRATION=true \
            -e EPHEMERAL=true \
            -e DISABLE_AUTO_UPDATE=true \
            ${GH_RUNNER_IMAGE} 10
